<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySql JDBC</title>
    <link href="/2020/05/26/MySQL/"/>
    <url>/2020/05/26/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC-MySQL"><a href="#JDBC-MySQL" class="headerlink" title="JDBC  MySQL"></a>JDBC  MySQL</h1><p><strong>1.</strong> 概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库<br>    JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p><p><strong>2.</strong> 快速入门：<br>    步骤：<br>        1. 新建一个libs文件夹，导入驱动jar包 <strong>mysql-connector-java-8.0.17.jar</strong><br>        2. 复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下<br>        3. 右键–&gt;Add As Library<img src="https://cdn.jsdelivr.net/gh/Arbories-LX/img-cdn/MYSQL.png" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>        4. 注册驱动<br>        5. 获取数据库连接对象 Connection<br>        6. 定义sql<br>        7. 获取执行sql语句的对象 Statement<br>        8. 执行sql，接受返回结果<br>        9. 处理结果<br>        10. 释放资源</p><p><strong>代码实现：</strong></p><pre><code class="hljs java"><span class="hljs-comment">//1. 导入驱动jar包</span>      <span class="hljs-comment">//2.注册驱动</span>      Class.forName(<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span>);      <span class="hljs-comment">//3.获取数据库连接对象</span>      Connection conn = DriverManager.getConnection(<span class="hljs-string">"jdbc:mysql://localhost/要修改的数据库?useSSL=false&amp;serverTimezone=GMT"</span>, <span class="hljs-string">"你的用户名"</span>, <span class="hljs-string">"你的密码"</span>);      <span class="hljs-comment">//4.定义sql语句</span>      String sql = <span class="hljs-string">"update account set balance = 500 where id = 1"</span>;      <span class="hljs-comment">//5.获取执行sql的对象 Statement</span>      Statement stmt = conn.createStatement();      <span class="hljs-comment">//6.执行sql</span>      <span class="hljs-keyword">int</span> count = stmt.executeUpdate(sql);      <span class="hljs-comment">//7.处理结果</span>      System.out.println(count);      <span class="hljs-comment">//8.释放资源</span>      stmt.close();      conn.close();</code></pre><p><strong>3. 详解各个对象：</strong></p><ol><li><p>DriverManager：驱动管理对象</p><pre><code>功能：1. 注册驱动：告诉程序该使用哪一个数据库驱动jar        **注意：mysql5之后的驱动jar包可以省略注册驱动的步骤**</code></pre></li><li><p>获取数据库连接：<br>方法：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">(String url, String user, String password)</span></span></code></pre><pre><code>参数：        * url：指定连接的路径        * 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称        * 例子：jdbc:mysql://localhost:3306/db3        * 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称        * user：用户名        * password：密码 </code></pre></li><li><p>Connection：数据库连接对象</p><ol><li>功能：<pre><code>获取执行sql 的对象   * Statement createStatement()   * PreparedStatement prepareStatement(String sql)  </code></pre></li><li>管理事务：<pre><code>* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务* 提交事务：commit() * 回滚事务：rollback() </code></pre></li></ol></li><li><p>Statement：执行sql的对象<br>执行sql</p><ol><li>boolean execute(String sql) ：可以执行任意的sql 了解 <pre><code>2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句    * 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。3. ResultSet executeQuery(String sql)  ：执行DQL（select)语句</code></pre></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>JDBC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2020/05/12/2/"/>
    <url>/2020/05/12/2/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h3><ul><li>Servlet就是sun公司开发动态web的一门技术</li><li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul><li>编写一个类，实现Servlet接口</li><li>把开发好的Java类部署到web服务器中。</li></ul></li></ul><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong><br>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p><ol><li><p>构建一个<strong>普通的Maven项目</strong>，删掉里面的src目录，在这个项目里面建立<strong>Moudel</strong>；这个空的工程就是Maven主工程；</p></li><li><p>关于Maven父子工程的理解：</p><p>父项目中会有</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span></code></pre><p>子项目会有</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-xxx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zhang.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></code></pre><p>父项目中的java子项目可以直接使用</p><pre><code class="hljs java">son extends father</code></pre></li><li><p>Maven环境优化</p><ol><li>修改web.xml为最新的</li><li>将maven的结构搭建完整</li></ol></li><li><p>编写一个Servlet程序</p><ol><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里我们直接继承HttpServlet</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;        <span class="hljs-comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">//ServletOutputStream outputStream = resp.getOutputStream();</span>        PrintWriter writer = resp.getWriter(); <span class="hljs-comment">//响应流</span>        writer.print(<span class="hljs-string">"Hello,Serlvet"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre></li></ol></li><li><p>编写Servlet的映射</p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--&lt;servlet-name&gt; 这个是我们要注册servlet的名字.</span><span class="hljs-comment"> &lt;servlet-class&gt; 这个就是指向我们要注册的servlet 的类地址</span><span class="hljs-comment"> &lt;servlet-mapping&gt; 是用来配置我们注册的组件的访问路径,里面包括两个节点：</span><span class="hljs-comment"> 1.&lt;servlet-name&gt; 这个要与 前面写的servlet那么一直</span><span class="hljs-comment"> 2.&lt;url-pattern&gt; 配置这个组件的访问路径</span><span class="hljs-comment"> --&gt;</span><span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre></li></ol><ol start="6"><li><p>配置Tomcat</p><p>注意：配置项目发布的路径就可以了</p></li><li><p>启动测试，OK！</p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3></li></ol><p><strong>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用。</strong></p><h3 id="1-共享数据"><a href="#1-共享数据" class="headerlink" title="1.共享数据"></a>1.共享数据</h3><p>在web中，当服务器启动时会为每一个web创建一个ServletContext对象，而web下的所有Servlet的共享这个ServletContext。<strong>所有Servlet之间可以利用ServletContext实现数据的共享。</strong></p><p>两个类HelloServlet , GetServlet</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;                <span class="hljs-comment">//this.getInitParameter()   初始化参数</span>        <span class="hljs-comment">//this.getServletConfig()   Servlet配置</span>        <span class="hljs-comment">//this.getServletContext()  Servlet上下文</span>        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();        String username = <span class="hljs-string">"xxx"</span>; <span class="hljs-comment">//数据</span>        context.setAttribute(<span class="hljs-string">"username"</span>,username); <span class="hljs-comment">//将一个数据保存在了ServletContext中，名字为：username 。值 username</span>    &#125;&#125;</code></pre><p><strong>取出数据</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext context = <span class="hljs-keyword">this</span>.getServletContext();        String username = (String) context.getAttribute(<span class="hljs-string">"username"</span>);        resp.setContentType(<span class="hljs-string">"text/html"</span>);        resp.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);        resp.getWriter().print(<span class="hljs-string">"名字"</span>+username);    &#125;&#125;</code></pre><p><strong>最后在xml文件中配置</strong></p><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zhang.servlet.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/get<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span></code></pre><p>最后测试访问结果</p><h3 id="2-获取初始化参数"><a href="#2-获取初始化参数" class="headerlink" title="2.获取初始化参数"></a>2.获取初始化参数</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置一些web应用初始化参数--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext Context = <span class="hljs-keyword">this</span>.getServletContext();        String url = Context.getInitParameter(<span class="hljs-string">"url"</span>);        resp.getWriter().print(url);    &#125;&#125;</code></pre><p>最后测试访问结果</p><h3 id="3-读取资源文件"><a href="#3-读取资源文件" class="headerlink" title="3.读取资源文件"></a>3.读取资源文件</h3><p><strong>Properties</strong><br>在java目录下新建properties，<strong>/WEB-INF/classes/db.properties</strong>目录</p><pre><code class="hljs ini"><span class="hljs-attr">username</span>=root12312<span class="hljs-attr">password</span>=zxczxczxc</code></pre><pre><code class="hljs java"><span class="hljs-comment">//同理需要 在xml中配置&lt;servlet&gt;</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        InputStream is = <span class="hljs-keyword">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">"/WEB-INF/classes/db.properties"</span>);        Properties prop = <span class="hljs-keyword">new</span> Properties();        prop.load(is);        String username = prop.getProperty(<span class="hljs-string">"username"</span>);        String password = prop.getProperty(<span class="hljs-string">"password"</span>);        resp.getWriter().print(username+<span class="hljs-string">""</span>+password);    &#125;&#125;</code></pre><p>最后测试访问结果</p><h3 id="4-请求转发"><a href="#4-请求转发" class="headerlink" title="4.请求转发"></a>4.请求转发</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext Context = <span class="hljs-keyword">this</span>.getServletContext();        <span class="hljs-comment">//转发的请求路径</span>        RequestDispatcher requestDispatcher = Context.getRequestDispatcher(<span class="hljs-string">"/aaa"</span>);  <span class="hljs-comment">//aaa为&lt;servlet-name&gt;</span>        <span class="hljs-comment">//调用forward实现请求转发</span>        requestDispatcher.forward(req, resp);        <span class="hljs-comment">//Context.getRequestDispatcher("/gp").forward(req, resp);</span>    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Servlet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Begin</title>
    <link href="/2020/05/05/1/"/>
    <url>/2020/05/05/1/</url>
    
    <content type="html"><![CDATA[<h1 id="一个新的开始"><a href="#一个新的开始" class="headerlink" title="一个新的开始"></a>一个新的开始</h1><h5 id="2020-年-4-月-12-日"><a href="#2020-年-4-月-12-日" class="headerlink" title="2020 年 4 月 12 日"></a>2020 年 4 月 12 日</h5><p>历经坎坷终于搭建好了属于自己的第一个网站（开心到上天.jpg），其中遇到了无数个小问题，电脑也差点被自己玩坏。</p><p><del>今天我在我的博客上写下了自己的第一篇文章</del></p><h6 id="先介绍一下这个网站："><a href="#先介绍一下这个网站：" class="headerlink" title="先介绍一下这个网站："></a>先介绍一下这个网站：</h6><p>本站使用 <strong>Github Pages</strong> 服务，使用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 框架，主题为 <a href="https://hexo.fluid-dev.com/docs" target="_blank" rel="noopener">Fluid</a>,同时也很感谢<strong>Fluid</strong>的开发者，<a href="https://zkqiang.cn/" target="_blank" rel="noopener">张凯强♥强哥</a> 以及 Fluid 的相关开发人员。</p><p><img src="https://s1.ax1x.com/2020/05/06/YE3xts.png" srcset="/img/loading.gif" alt=""></p><h5 id="2020-年-5-月-4-日"><a href="#2020-年-5-月-4-日" class="headerlink" title="2020 年 5 月 4 日"></a>2020 年 5 月 4 日</h5><p>自己花了9元钱在<strong>阿里云</strong>上购买了自己的第一个域名 <strong><a href="https://www.zsuzhan.top/" target="_blank" rel="noopener">https://www.zsuzhan.top/</a></strong> 也就是本站的地址,当然也遇到了很多小麻烦，谁让我现在还是个小菜鸡呢~</p><p>搭建这个博客的初心就是想记录一下自己写的东西和一些学习感悟，当然如果我俩之间有着很大很大很大的缘分，你访问到了我的博客，我俩可以加一个<strong>wechat</strong>  二维码就在<a href="https://www.zsuzhan.top/about/" target="_blank" rel="noopener">“关于”</a>那一页，我非常喜欢结交朋友啦。</p><p>最后希望看到这篇文章的小伙伴，每天都可以开心快乐，为了自己的理想奋斗。</p><p>晚安♥♥♥</p><p><a href="https://www.bilibili.com/video/BV1FV411d7u7/" target="_blank" rel="noopener">这个是五四青年节B站的视频</a></p><p><img src="https://cdn.jsdelivr.net/gh/Arbories-LX/img-cdn/Yk1AgO.jpg" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>开始</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>First</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
