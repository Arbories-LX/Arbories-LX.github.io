{"meta":{"title":"Zhang_suzhan's","subtitle":"","description":"","author":"Arbories 3a.","url":"http://arbories-lx.github.io","root":"/"},"pages":[{"title":"about","date":"2020-05-06T15:43:50.000Z","updated":"2020-05-26T23:37:02.634Z","comments":true,"path":"about/index.html","permalink":"http://arbories-lx.github.io/about/index.html","excerpt":"","text":"2020-05-06 20:43:50 我目前在一所双非本科大学读书，选择了计算机专业，喜欢上了编程。 目前学习的东西还非常少，不足以达到业务需求，但我还在努力，说实话希望自己以后也可以自己做出点东西来。 博客假期赶上新冠疫情蔓延全球，导致无法返校，因此选好了以后的方向，博客也就此诞生。 之前也多次想过建立自己的博客，但迟迟不敢动手，总停留在想象中。在B站受到up主的启发，于是建立此博客（其中历经大大小小无数的困难，但对我来说已经进步了），分享自己的日常。 可能不会有太多人看到这个博客，但是我会时不时的更新一些东西，记录我走过的每一步，记录自己进阶的过程。 最后，一直前进在路上，对生活充满着热爱。 &emsp; &emsp;&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp;&emsp;&emsp;今日任务： 早起(1/1)_ &emsp;熬夜(0/1)_&emsp;❤"}],"posts":[{"title":"MySql JDBC","slug":"MySQL","date":"2020-05-26T02:11:29.000Z","updated":"2020-05-26T10:02:01.266Z","comments":true,"path":"2020/05/26/MySQL/","link":"","permalink":"http://arbories-lx.github.io/2020/05/26/MySQL/","excerpt":"","text":"JDBC MySQL1. 概念：Java DataBase Connectivity Java 数据库连接， Java语言操作数据库 JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。 2. 快速入门： 步骤： 1. 新建一个libs文件夹，导入驱动jar包 mysql-connector-java-8.0.17.jar 2. 复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下 3. 右键–&gt;Add As Library 4. 注册驱动 5. 获取数据库连接对象 Connection 6. 定义sql 7. 获取执行sql语句的对象 Statement 8. 执行sql，接受返回结果 9. 处理结果 10. 释放资源 代码实现： //1. 导入驱动jar包 //2.注册驱动 Class.forName(\"com.mysql.cj.jdbc.Driver\"); //3.获取数据库连接对象 Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost/要修改的数据库?useSSL=false&amp;serverTimezone=GMT\", \"你的用户名\", \"你的密码\"); //4.定义sql语句 String sql = \"update account set balance = 500 where id = 1\"; //5.获取执行sql的对象 Statement Statement stmt = conn.createStatement(); //6.执行sql int count = stmt.executeUpdate(sql); //7.处理结果 System.out.println(count); //8.释放资源 stmt.close(); conn.close(); 3. 详解各个对象： DriverManager：驱动管理对象 功能：1. 注册驱动：告诉程序该使用哪一个数据库驱动jar **注意：mysql5之后的驱动jar包可以省略注册驱动的步骤** 获取数据库连接：方法： static Connection getConnection(String url, String user, String password) 参数： * url：指定连接的路径 * 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称 * 例子：jdbc:mysql://localhost:3306/db3 * 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称 * user：用户名 * password：密码 Connection：数据库连接对象 功能：获取执行sql 的对象 * Statement createStatement() * PreparedStatement prepareStatement(String sql) 管理事务：* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务 * 提交事务：commit() * 回滚事务：rollback() Statement：执行sql的对象执行sql boolean execute(String sql) ：可以执行任意的sql 了解 2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句 * 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。 3. ResultSet executeQuery(String sql) ：执行DQL（select)语句","categories":[{"name":"JDBC","slug":"JDBC","permalink":"http://arbories-lx.github.io/categories/JDBC/"}],"tags":[{"name":"JDBC","slug":"JDBC","permalink":"http://arbories-lx.github.io/tags/JDBC/"}]},{"title":"Servlet","slug":"2","date":"2020-05-12T06:46:25.000Z","updated":"2020-05-26T10:02:15.606Z","comments":true,"path":"2020/05/12/2/","link":"","permalink":"http://arbories-lx.github.io/2020/05/12/2/","excerpt":"","text":"ServletServlet简介 Servlet就是sun公司开发动态web的一门技术 Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤： 编写一个类，实现Servlet接口 把开发好的Java类部署到web服务器中。 把实现了Servlet接口的Java程序叫做，ServletSerlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet 构建一个普通的Maven项目，删掉里面的src目录，在这个项目里面建立Moudel；这个空的工程就是Maven主工程； 关于Maven父子工程的理解： 父项目中会有 &lt;modules&gt; &lt;module&gt;servlet&lt;/module&gt; &lt;/modules&gt; 子项目会有 &lt;parent&gt; &lt;artifactId&gt;servlet-xxx&lt;/artifactId&gt; &lt;groupId&gt;com.zhang.servlet&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; 父项目中的java子项目可以直接使用 son extends father Maven环境优化 修改web.xml为最新的 将maven的结构搭建完整 编写一个Servlet程序 编写一个普通类 实现Servlet接口，这里我们直接继承HttpServlet public class HelloServlet extends HttpServlet &#123; //由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样； @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; //ServletOutputStream outputStream = resp.getOutputStream(); PrintWriter writer = resp.getWriter(); //响应流 writer.print(\"Hello,Serlvet\"); &#125; @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; doGet(req, resp); &#125; &#125; 编写Servlet的映射 为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径； &lt;!--&lt;servlet-name&gt; 这个是我们要注册servlet的名字. &lt;servlet-class&gt; 这个就是指向我们要注册的servlet 的类地址 &lt;servlet-mapping&gt; 是用来配置我们注册的组件的访问路径,里面包括两个节点： 1.&lt;servlet-name&gt; 这个要与 前面写的servlet那么一直 2.&lt;url-pattern&gt; 配置这个组件的访问路径 --&gt; &lt;!--注册Servlet--&gt; &lt;servlet&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;servlet-class&gt;com.zhang.servlet.HelloServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;!--Servlet的请求路径--&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 配置Tomcat 注意：配置项目发布的路径就可以了 启动测试，OK！ ServletContext web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用。 1.共享数据在web中，当服务器启动时会为每一个web创建一个ServletContext对象，而web下的所有Servlet的共享这个ServletContext。所有Servlet之间可以利用ServletContext实现数据的共享。 两个类HelloServlet , GetServlet public class HelloServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; //this.getInitParameter() 初始化参数 //this.getServletConfig() Servlet配置 //this.getServletContext() Servlet上下文 ServletContext context = this.getServletContext(); String username = \"xxx\"; //数据 context.setAttribute(\"username\",username); //将一个数据保存在了ServletContext中，名字为：username 。值 username &#125; &#125; 取出数据 public class GetServlet extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; ServletContext context = this.getServletContext(); String username = (String) context.getAttribute(\"username\"); resp.setContentType(\"text/html\"); resp.setCharacterEncoding(\"utf-8\"); resp.getWriter().print(\"名字\"+username); &#125; &#125; 最后在xml文件中配置 &lt;servlet&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;servlet-class&gt;com.zhang.servlet.HelloServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;hello&lt;/servlet-name&gt; &lt;url-pattern&gt;/hello&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;get&lt;/servlet-name&gt; &lt;servlet-class&gt;com.zhang.servlet.GetServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;get&lt;/servlet-name&gt; &lt;url-pattern&gt;/get&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 最后测试访问结果 2.获取初始化参数&lt;!--配置一些web应用初始化参数--&gt; &lt;context-param&gt; &lt;param-name&gt;url&lt;/param-name&gt; &lt;param-value&gt;jdbc:mysql://localhost:3306/mybatis&lt;/param-value&gt; &lt;/context-param&gt; public class ServletDemo extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; ServletContext Context = this.getServletContext(); String url = Context.getInitParameter(\"url\"); resp.getWriter().print(url); &#125; &#125; 最后测试访问结果 3.读取资源文件Properties在java目录下新建properties，/WEB-INF/classes/db.properties目录 username=root12312 password=zxczxczxc //同理需要 在xml中配置&lt;servlet&gt; public class ServletDemo extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; InputStream is = this.getServletContext().getResourceAsStream(\"/WEB-INF/classes/db.properties\"); Properties prop = new Properties(); prop.load(is); String username = prop.getProperty(\"username\"); String password = prop.getProperty(\"password\"); resp.getWriter().print(username+\"\"+password); &#125; &#125; 最后测试访问结果 4.请求转发public class ServletDemo extends HttpServlet &#123; @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; ServletContext Context = this.getServletContext(); //转发的请求路径 RequestDispatcher requestDispatcher = Context.getRequestDispatcher(\"/aaa\"); //aaa为&lt;servlet-name&gt; //调用forward实现请求转发 requestDispatcher.forward(req, resp); //Context.getRequestDispatcher(\"/gp\").forward(req, resp); &#125; &#125;","categories":[{"name":"Servlet","slug":"Servlet","permalink":"http://arbories-lx.github.io/categories/Servlet/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://arbories-lx.github.io/tags/JavaWeb/"}]},{"title":"Begin","slug":"1","date":"2020-05-05T15:46:25.000Z","updated":"2020-05-26T10:01:43.901Z","comments":true,"path":"2020/05/05/1/","link":"","permalink":"http://arbories-lx.github.io/2020/05/05/1/","excerpt":"","text":"一个新的开始2020 年 4 月 12 日历经坎坷终于搭建好了属于自己的第一个网站（开心到上天.jpg），其中遇到了无数个小问题，电脑也差点被自己玩坏。 今天我在我的博客上写下了自己的第一篇文章 先介绍一下这个网站：本站使用 Github Pages 服务，使用 Hexo 框架，主题为 Fluid,同时也很感谢Fluid的开发者，张凯强♥强哥 以及 Fluid 的相关开发人员。 2020 年 5 月 4 日自己花了9元钱在阿里云上购买了自己的第一个域名 https://www.zsuzhan.top/ 也就是本站的地址,当然也遇到了很多小麻烦，谁让我现在还是个小菜鸡呢~ 搭建这个博客的初心就是想记录一下自己写的东西和一些学习感悟，当然如果我俩之间有着很大很大很大的缘分，你访问到了我的博客，我俩可以加一个wechat 二维码就在“关于”那一页，我非常喜欢结交朋友啦。 最后希望看到这篇文章的小伙伴，每天都可以开心快乐，为了自己的理想奋斗。 晚安♥♥♥ 这个是五四青年节B站的视频","categories":[{"name":"开始","slug":"开始","permalink":"http://arbories-lx.github.io/categories/%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"Fluid","slug":"Fluid","permalink":"http://arbories-lx.github.io/tags/Fluid/"},{"name":"First","slug":"First","permalink":"http://arbories-lx.github.io/tags/First/"}]}],"categories":[{"name":"JDBC","slug":"JDBC","permalink":"http://arbories-lx.github.io/categories/JDBC/"},{"name":"Servlet","slug":"Servlet","permalink":"http://arbories-lx.github.io/categories/Servlet/"},{"name":"开始","slug":"开始","permalink":"http://arbories-lx.github.io/categories/%E5%BC%80%E5%A7%8B/"}],"tags":[{"name":"JDBC","slug":"JDBC","permalink":"http://arbories-lx.github.io/tags/JDBC/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://arbories-lx.github.io/tags/JavaWeb/"},{"name":"Fluid","slug":"Fluid","permalink":"http://arbories-lx.github.io/tags/Fluid/"},{"name":"First","slug":"First","permalink":"http://arbories-lx.github.io/tags/First/"}]}